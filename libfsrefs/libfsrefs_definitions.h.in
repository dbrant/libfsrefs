/*
 * The internal definitions
 *
 * Copyright (C) 2012-2022, Joachim Metz <joachim.metz@gmail.com>
 *
 * Refer to AUTHORS for acknowledgements.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#if !defined( _LIBFSREFS_INTERNAL_DEFINITIONS_H )
#define _LIBFSREFS_INTERNAL_DEFINITIONS_H

#include <common.h>
#include <byte_stream.h>

#define LIBFSREFS_ENDIAN_BIG					_BYTE_STREAM_ENDIAN_BIG
#define LIBFSREFS_ENDIAN_LITTLE					_BYTE_STREAM_ENDIAN_LITTLE

/* Define HAVE_LOCAL_LIBFSREFS for local use of libfsrefs
 */
#if !defined( HAVE_LOCAL_LIBFSREFS )
#include <libfsrefs/definitions.h>

/* The definitions in <libfsrefs/definitions.h> are copied here
 * for local use of libfsrefs
 */
#else
#define LIBFSREFS_VERSION					@VERSION@

/* The version string
 */
#define LIBFSREFS_VERSION_STRING				"@VERSION@"

/* The file access
 * bit 1        set to 1 for read access
 * bit 2        set to 1 for write access
 * bit 3-8      not used
 */
enum LIBFSREFS_ACCESS_FLAGS
{
	LIBFSREFS_ACCESS_FLAG_READ				= 0x01,
/* Reserved: not supported yet */
	LIBFSREFS_ACCESS_FLAG_WRITE				= 0x02
};

/* The file access macros
 */
#define LIBFSREFS_OPEN_READ					( LIBFSREFS_ACCESS_FLAG_READ )
/* Reserved: not supported yet */
#define LIBFSREFS_OPEN_WRITE					( LIBFSREFS_ACCESS_FLAG_WRITE )
/* Reserved: not supported yet */
#define LIBFSREFS_OPEN_READ_WRITE				( LIBFSREFS_ACCESS_FLAG_READ | LIBFSREFS_ACCESS_FLAG_WRITE )

/* The file attribute flags
 */
enum LIBFSREFS_FILE_ATTRIBUTE_FLAGS
{
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_READ_ONLY			= 0x00000001UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_HIDDEN			= 0x00000002UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_SYSTEM			= 0x00000004UL,

	LIBFSREFS_FILE_ATTRIBUTE_FLAG_DIRECTORY			= 0x00000010UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_ARCHIVE			= 0x00000020UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_DEVICE			= 0x00000040UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_NORMAL			= 0x00000080UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_TEMPORARY			= 0x00000100UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_SPARSE_FILE		= 0x00000200UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_REPARSE_POINT		= 0x00000400UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_COMPRESSED		= 0x00000800UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_OFFLINE			= 0x00001000UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_NOT_CONTENT_INDEXED	= 0x00002000UL,
	LIBFSREFS_FILE_ATTRIBUTE_FLAG_ENCRYPTED			= 0x00004000UL,

	LIBFSREFS_FILE_ATTRIBUTE_FLAG_VIRTUAL			= 0x00010000UL
};

#endif

/* The predefined MFT entry index values
 */
enum LIBFSREFS_MFT_ENTRY_INDEXES
{
	LIBFSREFS_MFT_ENTRY_INDEX_MFT				= 0,
	LIBFSREFS_MFT_ENTRY_INDEX_MFT_MIRROR			= 1,

	LIBFSREFS_MFT_ENTRY_INDEX_VOLUME			= 3,

	LIBFSREFS_MFT_ENTRY_INDEX_ROOT_DIRECTORY		= 5,
	LIBFSREFS_MFT_ENTRY_INDEX_BITMAP			= 6,

	LIBFSREFS_MFT_ENTRY_INDEX_UPPERCASE			= 10,
};

/* The attribute types
 */
enum LIBFSREFS_ATTRIBUTE_TYPES
{
	LIBFSREFS_ATTRIBUTE_TYPE_STANDARD_INFORMATION		= 0x00000010UL,
	LIBFSREFS_ATTRIBUTE_TYPE_ATTRIBUTE_LIST			= 0x00000020UL,
	LIBFSREFS_ATTRIBUTE_TYPE_FILE_NAME			= 0x00000030UL,
	LIBFSREFS_ATTRIBUTE_TYPE_OBJECT_IDENTIFIER		= 0x00000040UL,
	LIBFSREFS_ATTRIBUTE_TYPE_SECURITY_DESCRIPTOR		= 0x00000050UL,
	LIBFSREFS_ATTRIBUTE_TYPE_VOLUME_NAME			= 0x00000060UL,
	LIBFSREFS_ATTRIBUTE_TYPE_VOLUME_INFORMATION		= 0x00000070UL,
	LIBFSREFS_ATTRIBUTE_TYPE_DATA				= 0x00000080UL,
	LIBFSREFS_ATTRIBUTE_TYPE_INDEX_ROOT			= 0x00000090UL,
	LIBFSREFS_ATTRIBUTE_TYPE_INDEX_ALLOCATION		= 0x000000a0UL,
	LIBFSREFS_ATTRIBUTE_TYPE_BITMAP				= 0x000000b0UL,
	LIBFSREFS_ATTRIBUTE_TYPE_REPARSE_POINT			= 0x000000c0UL,
	LIBFSREFS_ATTRIBUTE_TYPE_EXTENDED_INFORMATION		= 0x000000d0UL,
	LIBFSREFS_ATTRIBUTE_TYPE_EXTENDED			= 0x000000e0UL,
	LIBFSREFS_ATTRIBUTE_TYPE_PROPERTY_SET			= 0x000000f0UL,
	LIBFSREFS_ATTRIBUTE_TYPE_LOGGED_UTILITY_STREAM		= 0x00000100UL,

	LIBFSREFS_ATTRIBUTE_TYPE_END_OF_ATTRIBUTES		= 0xffffffffUL
};

/* The index value flags
 */
enum LIBFSREFS_INDEX_VALUE_FLAGS
{
	LIBFSREFS_INDEX_VALUE_FLAG_HAS_SUB_NODE			= 0x00000001UL,
	LIBFSREFS_INDEX_VALUE_FLAG_IS_LAST			= 0x00000002UL
};

/* The file entry flags
 */
enum LIBFSREFS_FILE_ENTRY_FLAGS
{
	LIBFSREFS_FILE_ENTRY_FLAG_IO_HANDLE_NON_MANAGED		= 0x00,
	LIBFSREFS_FILE_ENTRY_FLAG_IO_HANDLE_MANAGED		= 0x01
};

/* The file name attribute (name string) namespace values
 */
enum LIBFSREFS_FILE_NAME_NAMESPACES
{
	LIBFSREFS_FILE_NAME_NAMESPACE_POSIX			= 0x00,
	LIBFSREFS_FILE_NAME_NAMESPACE_WINDOWS			= 0x01,
	LIBFSREFS_FILE_NAME_NAMESPACE_DOS			= 0x02,
	LIBFSREFS_FILE_NAME_NAMESPACE_DOS_WINDOWS		= 0x03
};

#if defined( HAVE_DEBUG_OUTPUT )
#define LIBFSREFS_FILE_ENTRY_FLAGS_DEFAULT			LIBFSREFS_FILE_ENTRY_FLAG_IO_HANDLE_NON_MANAGED
#else
#define LIBFSREFS_FILE_ENTRY_FLAGS_DEFAULT			LIBFSREFS_FILE_ENTRY_FLAG_IO_HANDLE_MANAGED
#endif

#define LIBFSREFS_MAXIMUM_CACHE_ENTRIES_DATA_RUNS_BLOCK		32
#define LIBFSREFS_MAXIMUM_CACHE_ENTRIES_MFT_ENTRIES		8192

#endif

